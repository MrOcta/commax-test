name: 'Setup openpilot Environment without Docker'
description: 'Installs apt and Python dependencies with caching.'

inputs:
  python-version:
    description: 'Python version to use'
    required: false
    default: '3.8' # Or your project's default Python version

runs:
  using: "composite"
  steps:
    - name: Harden Runner
      shell: bash
      run: |
        # Optional: Remove tools not needed to free up disk space and reduce attack surface
        # Be careful with this, only remove what you're sure isn't needed by any job
        # sudo rm -rf /usr/share/dotnet
        # sudo rm -rf /opt/ghc
        # sudo rm -rf "/usr/local/share/boost"
        # sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        echo "Runner hardened (optional step)."

    - name: Cache apt packages
      id: cache-apt
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/setup/apt-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install apt packages
      shell: bash
      run: |
        echo "Updating apt lists and installing packages..."
        sudo apt-get update -q
        # Read packages from apt-requirements.txt and install them
        # Using xargs to pass arguments from file, handling potential empty lines
        # The tr command removes carriage returns if the file has CRLF endings
        # The grep filters out empty lines or lines with only whitespace
        tr -d '\r' < .github/workflows/setup/apt-requirements.txt | grep -v "^\s*$" | \
          xargs sudo apt-get install -y --no-install-recommends
        echo "Apt packages installed."

    - name: Setup Python ${{ inputs.python-version }}
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Cache Python Virtual Environment
      id: cache-venv
      uses: actions/cache@v4
      with:
        path: ./.venv # Cache the entire virtual environment directory
        key: ${{ runner.os }}-venv-${{ inputs.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-venv-${{ inputs.python-version }}-

    - name: Create Virtual Environment and Install Dependencies (if cache miss)
      if: steps.cache-venv.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Cache miss for virtual environment. Creating and installing dependencies."
        python -m venv ./.venv
        source ./.venv/bin/activate
        pip install --upgrade pip wheel
        pip install -r requirements.txt
        echo "Virtual environment created and dependencies installed."
    
    - name: Add venv to GITHUB_PATH
      shell: bash
      run: |
        echo "Adding .venv/bin to GITHUB_PATH"
        echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH

    # - name: Verify venv (Optional debugging step)
    #   shell: bash
    #   run: |
    #     which python
    #     python --version
    #     which pip
    #     pip --version
    #     pip list
