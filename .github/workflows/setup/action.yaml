name: "openpilot env setup"

inputs:
  is_retried:
    description: "A mock param that asserts that we use the setup-with-retry instead of this action directly"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    # Assert that this action is retried using the setup-with-retry
    - shell: bash
      if: ${{ inputs.is_retried == 'false' }}
      run: |
        echo "You should not run this action directly. Use setup-with-retry instead"
        exit 1

    # Ensure Git LFS files are pulled
    - shell: bash
      run: git lfs pull

    # Normalize file permissions for consistent Docker caching
    - name: Normalize file permissions
      shell: bash
      run: |
        find . -type f -executable -not -perm 755 -exec chmod 755 {} \;
        find . -type f -not -executable -not -perm 644 -exec chmod 644 {} \;

    # Configure APT to use workspace cache directory
    - name: Configure APT cache
      shell: bash
      run: |
        APT_CACHE_DIR="${{ github.workspace }}/apt-cache"
        sudo mkdir -p "${APT_CACHE_DIR}/archives/partial"
        sudo chmod -R 777 "${APT_CACHE_DIR}"
        echo "Dir::Cache::archives \"${APT_CACHE_DIR}/archives\";" | sudo tee /etc/apt/apt.conf.d/90-github-cache

    # Restore APT package cache
    - name: Restore APT packages
      uses: actions/cache/restore@v4
      with:
        path: ${{ github.workspace }}/apt-cache/archives
        key: Linux-apt-${{ runner.os }}-${{ hashFiles('.github/workflows/setup/apt-packages.txt') }}
        restore-keys: |
          Linux-apt-${{ runner.os }}-

    # Read package list from apt-packages.txt
    - name: Read packages
      shell: bash
      run: |
        PACKAGES=$(cat .github/workflows/setup/apt-packages.txt | tr '\n' ' ')
        echo "PACKAGES=$PACKAGES" >> $GITHUB_ENV

    # Install packages using APT (will use cache if available)
    - name: Install APT packages
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends $PACKAGES

    # Save updated APT package cache
    - name: Save APT cache
      uses: actions/cache/save@v4
      with:
        path: ${{ github.workspace }}/apt-cache/archives
        key: Linux-apt-${{ runner.os }}-${{ hashFiles('.github/workflows/setup/apt-packages.txt') }}

    # Set up Python environment using uv
    - uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    # Sync Python dependencies
    - shell: bash
      run: uv sync --frozen --all-extras

    # Build cache setup
    - id: date
      shell: bash
      run: echo "CACHE_COMMIT_DATE=$(git log -1 --pretty='format:%cd' --date=format:'%Y-%m-%d-%H:%M')" >> $GITHUB_ENV

    - shell: bash
      run: echo "$CACHE_COMMIT_DATE"

    # Set up SCons cache
    - id: scons-cache
      uses: ./.github/workflows/auto-cache
      with:
        path: /tmp/scons_cache
        key: scons-${{ runner.arch }}-${{ env.CACHE_COMMIT_DATE }}-${{ github.sha }}
        restore-keys: |
          scons-${{ runner.arch }}-${{ env.CACHE_COMMIT_DATE }}
          scons-${{ runner.arch }}
