name: 'openpilot env setup'

inputs:
  is_retried:
    description: 'A mock param that asserts that we use the setup-with-retry instead of this action directly'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    # 1) Enforce that this step must be called only from the "setup-with-retry" action
    - shell: bash
      if: ${{ inputs.is_retried == 'false' }}
      run: |
        echo "You should not run this action directly. Use setup-with-retry instead"
        exit 1

    # 2) Disallow retries (if the job is re-run automatically, fail)
    - shell: bash
      name: No retries!
      run: |
        if [ "${{ github.run_attempt }}" -gt 1 ]; then
          echo -e "\033[0;31m##################################################"
          echo -e "\033[0;31m    Retries not allowed! Fix the flaky test!      "
          echo -e "\033[0;31m##################################################\033[0m"
          exit 1
        fi

    # 3) Pull any Git LFS objects (after checkout)
    - shell: bash
      name: Pull LFS objects
      run: git lfs pull

    # 4) (Optional) Restore your APT cache
    - name: Restore apt cache
      uses: actions/cache@v3
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt

    # 5) Install apt dependencies
    - shell: bash
      name: Install apt dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          build-essential \
          python3-dev \
          python3-pip \
          git \
          libffi-dev \
          # ... add any other needed system packages here ...

    # 6) (Optional) Restore your pip cache
    - name: Restore pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

    # 7) Install Python requirements
    - shell: bash
      name: Install python requirements
      run: |
        python3 -m pip install --upgrade pip wheel
        python3 -m pip install -r requirements.txt

    # 8) Capture commit date for caching (used in SCons cache key)
    - id: date
      shell: bash
      run: echo "CACHE_COMMIT_DATE=$(git log -1 --pretty='format:%cd' --date=format:'%Y-%m-%d-%H:%M')" >> $GITHUB_ENV

    - shell: bash
      run: echo "$CACHE_COMMIT_DATE"

    # 9) Restore or update your SCons cache
    - id: scons-cache
      uses: ./.github/workflows/auto-cache
      with:
        path: .ci_cache/scons_cache
        key: scons-${{ runner.arch }}-${{ env.CACHE_COMMIT_DATE }}-${{ github.sha }}
        restore-keys: |
          scons-${{ runner.arch }}-${{ env.CACHE_COMMIT_DATE }}
          scons-${{ runner.arch }}

    # 10) Normalize file permissions (previously used for Docker caching consistency)
    - id: normalize-file-permissions
      shell: bash
      name: Normalize file permissions
      run: |
        find . -type f -executable -not -perm 755 -exec chmod 755 {} \;
        find . -type f -not -executable -not -perm 644 -exec chmod 644 {} \;

    # 11) (Optional) Run your SCons build or other setup commands directly on the runner
    - shell: bash
      name: SCons build
      run: |
        scons  # or whatever build command you need
